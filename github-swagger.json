{
  "swagger": "2.0",
  "info": {
    "title": "GitHub API",
    "description": "GitHub API",
    "termsOfService": "terms",
    "license": {
      "name": "proprietary"
    },
    "version": "1"
  },
  "host": "api.github.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the authenticated user",
        "operationId": "getUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "The integer ID of the last User that you've seen.",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get information about repository by $owner and $repo",
        "operationId": "getRepository",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "Repository owner",
            "required": true,
            "type": "string",
            "example": "ovr"
          },
          {
            "name": "repo",
            "in": "path",
            "description": "Repository name",
            "required": true,
            "type": "string",
            "example": "ghubber"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RepositoryEntity"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/authorizations": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create a new authorization",
        "operationId": "createAuthorization",
        "security": "basic",
        "parameters": [
          {
            "name": "scopes",
            "in": "body",
            "description": "A list of scopes that this authorization is in.",
            "required": false,
            "type": "array"
          },
          {
            "name": "note",
            "in": "body",
            "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_url",
            "in": "body",
            "description": "A URL to remind you what app the OAuth token is for.",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "body",
            "description": "The 20 character OAuth app client key for which to create the token.",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_secret",
            "in": "body",
            "description": "The 40 character OAuth app client secret for which to create the token.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fingerprint",
            "in": "body",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuthorizationEntity"
            }
          }
        }
      }
    },
    "/users/{username}/repos": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List user repositories",
        "operationId": "getRepositoriesByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string",
            "default": "owner",
            "enum": [
              "all",
              "owner",
              "member"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "type": "string",
            "default": "full_name",
            "enum": [
              "created",
              "updated",
              "pushed",
              "full_name"
            ]
          },
          {
            "name": "direction",
            "in": "query",
            "description": "direction",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "definitions": {
    "OrganizationEntity": {
      "required": [
        "id",
        "login",
        "avatar_url",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 8386838
        },
        "login": {
          "type": "string",
          "example": "SocialConnect"
        },
        "avatar_url": {
          "type": "string",
          "example": "https://avatars1.githubusercontent.com/u/8386838?v=3"
        },
        "description": {
          "type": "string",
          "example": "Connect your code with Services"
        }
      }
    },
    "AuthorizationEntity": {
      "required": [
        "id",
        "token",
        "hashed_token"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "33387350"
        },
        "token": {
          "type": "string",
          "example": "b4edd09a7cbeebb9a562f69640a5eb17aj158e1d"
        },
        "hashed_token": {
          "type": "string",
          "example": "40f5a502d9e2563lcz58dfcade94a9aeb589ac6afd8c453880a70dec31b16144"
        }
      }
    },
    "RepositoryEntity": {
      "required": [
        "id",
        "owner",
        "name",
        "url",
        "sha",
        "html_url",
        "comments_url",
        "fork"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "33387350"
        },
        "owner": {
          "type": "object",
          "$ref": "#/definitions/UserEntity"
        },
        "name": {
          "type": "string",
          "example": "ovr/ghubber"
        },
        "url": {
          "type": "string",
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "sha": {
          "type": "string",
          "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "html_url": {
          "type": "string",
          "example": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "comments_url": {
          "type": "string",
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
        },
        "fork": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UserEntity": {
      "required": [
        "login",
        "id",
        "avatar_url"
      ],
      "properties": {
        "login": {
          "type": "string",
          "example": "octocat"
        },
        "id": {
          "type": "string",
          "example": "1"
        },
        "avatar_url": {
          "type": "string",
          "example": "1"
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "description": "JWT token created from POST /token",
      "name": "X-AUTH-TOKEN",
      "in": "header"
    },
    "basic": {
      "type": "basic",
      "description": "Basic authentication"
    }
  }
}