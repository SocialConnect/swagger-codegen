{
  "swagger": "2.0",
  "info": {
    "title": "GitHub API",
    "description": "GitHub API",
    "termsOfService": "terms",
    "license": {
      "name": "proprietary"
    },
    "version": "1"
  },
  "host": "api.github.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/graphql": {
      "post": {
        "tags": [
          "GraphQL"
        ],
        "summary": "Execute GraphQL query",
        "description": "Execute GraphQL query.",
        "operationId": "executeGraphQL",
        "parameters": [
          {
            "name": "query",
            "in": "formData",
            "description": "Username who join Organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List your notifications",
        "description": "List all notifications for the current user, sorted by most recently updated.",
        "operationId": "getNotifications",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "If true, show notifications marked as read. Default: false",
            "required": false,
            "type": "boolean",
            "example": false
          },
          {
            "name": "participating",
            "in": "query",
            "description": "f true, only shows notifications in which the user is directly participating or mentioned. Default: false",
            "required": false,
            "type": "boolean",
            "example": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationEntity"
              }
            }
          }
        }
      }
    },
    "/search/issues": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search issues",
        "operationId": "searchIssues",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query",
            "required": true,
            "type": "string",
            "example": "user:ovr"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchIssuesResult"
            }
          }
        }
      }
    },
    "/search/repositories": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search repositories",
        "operationId": "searchRepositories",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query",
            "required": true,
            "type": "string",
            "example": "user:ovr"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SearchRepositoriesResult"
            }
          }
        }
      }
    },
    "/users/{id}/followers": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user's followers",
        "operationId": "getUserFollowers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{id}/following": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get users who follow user",
        "operationId": "getUserFollowing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "GitHub"
        ],
        "summary": "List public events",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PushEvent"
                  },
                  {
                    "$ref": "#/definitions/PullRequestEvent"
                  },
                  {
                    "$ref": "#/definitions/CommitCommentEvent"
                  },
                  {
                    "$ref": "#/definitions/PullRequestReviewCommentEvent"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{id}/received_events": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List events that a user has received",
        "operationId": "getUserReceivedEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PushEvent"
                  },
                  {
                    "$ref": "#/definitions/PullRequestEvent"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{username}/events/orgs/{org}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List events for an organization",
        "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.",
        "operationId": "getOrganizationUserEvents",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username who join Organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "org",
            "in": "path",
            "description": "Organization name",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PushEvent"
                  },
                  {
                    "$ref": "#/definitions/PullRequestEvent"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the authenticated user",
        "operationId": "getUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserEntity"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "The integer ID of the last User that you've seen.",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get information about repository by $owner and $repo",
        "operationId": "getRepository",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "Repository owner",
            "required": true,
            "type": "string",
            "example": "ovr"
          },
          {
            "name": "repo",
            "in": "path",
            "description": "Repository name",
            "required": true,
            "type": "string",
            "example": "ghubber"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RepositoryEntity"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "List collaborators by $owner and $repo",
        "operationId": "getRepositoryCollaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "Repository owner",
            "required": true,
            "type": "string",
            "example": "ovr"
          },
          {
            "name": "repo",
            "in": "path",
            "description": "Repository name",
            "required": true,
            "type": "string",
            "example": "ghubber"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/authorizations": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create a new authorization",
        "operationId": "createAuthorization",
        "security": "basic",
        "parameters": [
          {
            "name": "scopes",
            "in": "body",
            "description": "A list of scopes that this authorization is in.",
            "required": false,
            "type": "array"
          },
          {
            "name": "note",
            "in": "body",
            "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_url",
            "in": "body",
            "description": "A URL to remind you what app the OAuth token is for.",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "body",
            "description": "The 20 character OAuth app client key for which to create the token.",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_secret",
            "in": "body",
            "description": "The 40 character OAuth app client secret for which to create the token.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fingerprint",
            "in": "body",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuthorizationEntity"
            }
          }
        }
      }
    },
    "/authorizations/{id}": {
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete an authorization",
        "operationId": "deleteAuthorization",
        "security": "basic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of authorization",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/users/{username}/repos": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List user repositories",
        "operationId": "getRepositoriesByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": false,
            "type": "string",
            "default": "owner",
            "enum": [
              "all",
              "owner",
              "member"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort",
            "required": false,
            "type": "string",
            "default": "full_name",
            "enum": [
              "created",
              "updated",
              "pushed",
              "full_name"
            ]
          },
          {
            "name": "direction",
            "in": "query",
            "description": "direction",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit for page",
            "required": false,
            "type": "integer",
            "default": 30
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/user/orgs": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List your organizations",
        "description": "List organizations for the authenticated user",
        "operationId": "getUserOrganizations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{username}/orgs": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List user organizationsIntegrations",
        "description": "List public organization memberships for the specified user",
        "operationId": "getOrganizationsByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationEntity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "definitions": {
    "OrganizationEntity": {
      "required": [
        "id",
        "login",
        "avatar_url",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 8386838
        },
        "login": {
          "type": "string",
          "example": "SocialConnect"
        },
        "avatar_url": {
          "type": "string",
          "example": "https://avatars1.githubusercontent.com/u/8386838?v=3"
        },
        "description": {
          "type": "string",
          "example": "Connect your code with Services"
        }
      }
    },
    "AuthorizationEntity": {
      "required": [
        "id",
        "token",
        "hashed_token"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "33387350"
        },
        "token": {
          "type": "string",
          "example": "b4edd09a7cbeebb9a562f69640a5eb17aj158e1d"
        },
        "hashed_token": {
          "type": "string",
          "example": "40f5a502d9e2563lcz58dfcade94a9aeb589ac6afd8c453880a70dec31b16144"
        }
      }
    },
    "LabelEntity": {
      "required": [
        "id",
        "name",
        "color",
        "default"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1305162
        },
        "name": {
          "type": "string",
          "example": "enhancement"
        },
        "color": {
          "type": "string",
          "example": "84b6eb"
        },
        "default": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "NotificationSubject": {
      "required": [
        "title",
        "type"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Greetings"
        },
        "type": {
          "type": "string",
          "example": "Issue"
        }
      }
    },
    "NotificationEntity": {
      "required": [
        "id",
        "repository",
        "subject",
        "reason",
        "unread",
        "updated_at",
        "last_read_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "example": 216476314
        },
        "repository": {
          "type": "object",
          "$ref": "#/definitions/RepositoryEntity"
        },
        "subject": {
          "type": "object",
          "$ref": "#/definitions/NotificationSubject"
        },
        "reason": {
          "type": "string"
        },
        "unread": {
          "type": "boolean",
          "example": false
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "example": "2014-11-07T22:01:45Z"
        },
        "last_read_at": {
          "type": "string",
          "format": "date-time",
          "example": "2014-11-07T22:01:45Z"
        }
      }
    },
    "IssueEntity": {
      "required": [
        "id",
        "number",
        "title",
        "body",
        "repository_url",
        "created_at",
        "labels",
        "user",
        "milestone"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 216476314
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "example": 32
        },
        "title": {
          "type": "string",
          "example": "mt_rand is a linear alg, will be better to provide more true way"
        },
        "body": {
          "type": "string",
          "example": "Text of issue"
        },
        "repository_url": {
          "type": "string",
          "example": "https://api.github.com/repos/ovr/ghubber"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-31T05:50:23Z"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelEntity"
          }
        },
        "milestone": {
          "type": "object",
          "$ref": "#/definitions/MilestoneEntity"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/UserEntity"
        }
      }
    },
    "MilestoneEntity": {
      "required": [
        "id",
        "number",
        "state",
        "title",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 216476314
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "example": 32
        },
        "state": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "title": {
          "type": "string",
          "example": "v1.0"
        },
        "description": {
          "type": "string",
          "example": "Tracking milestone for version 1.0"
        }
      }
    },
    "SearchIssuesResult": {
      "required": [
        "total_count",
        "incomplete_results",
        "items"
      ],
      "properties": {
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 107
        },
        "incomplete_results": {
          "type": "boolean",
          "example": false
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueEntity"
          }
        }
      }
    },
    "SearchRepositoriesResult": {
      "required": [
        "total_count",
        "incomplete_results",
        "items"
      ],
      "properties": {
        "total_count": {
          "type": "integer",
          "format": "int32",
          "example": 107
        },
        "incomplete_results": {
          "type": "boolean",
          "example": false
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryEntity"
          }
        }
      }
    },
    "PushEvent": {
      "description": "Triggered when a repository branch is pushed to. In addition to branch pushes, webhook push events are also triggered when repository tags are pushed.",
      "required": [
        "id",
        "type",
        "actor",
        "repo",
        "payload",
        "public",
        "created_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "example": 5935151556
        },
        "type": {
          "type": "string",
          "enum": [
            "PushEvent"
          ]
        },
        "actor": {
          "type": "object"
        },
        "repo": {
          "type": "object"
        },
        "payload": {
          "type": "object"
        },
        "public": {
          "type": "boolean",
          "example": "true"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-24T15:42:53Z"
        }
      }
    },
    "PullRequestEvent": {
      "description": "Triggered when a pull request is assigned, unassigned, labeled, unlabeled, opened, edited, closed, reopened, or synchronized. Also triggered when a pull request review is requested, or when a review request is removed",
      "required": [
        "id",
        "type",
        "actor",
        "repo",
        "payload",
        "public",
        "created_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "example": 5935151556
        },
        "type": {
          "type": "string",
          "enum": [
            "PullRequestEvent"
          ]
        },
        "actor": {
          "type": "object"
        },
        "repo": {
          "type": "object"
        },
        "payload": {
          "type": "object"
        },
        "public": {
          "type": "boolean",
          "example": "true"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-24T15:42:53Z"
        }
      }
    },
    "CommitCommentEvent": {
      "description": "Triggered when a commit comment is created.",
      "required": [
        "id",
        "type",
        "payload",
        "actor",
        "repo"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "example": 5935151556
        },
        "type": {
          "type": "string",
          "enum": [
            "CommitCommentEvent"
          ]
        },
        "payload": {
          "type": "object"
        },
        "actor": {
          "type": "object"
        },
        "repo": {
          "type": "object"
        },
        "public": {
          "type": "boolean",
          "example": "true"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-24T15:42:53Z"
        }
      }
    },
    "PullRequestReviewCommentEvent": {
      "description": "Triggered when a comment on a pull request's unified diff is created, edited, or deleted (in the Files Changed tab).",
      "required": [
        "id",
        "type",
        "org",
        "payload",
        "actor",
        "repo"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "example": 5935151556
        },
        "type": {
          "type": "string",
          "enum": [
            "PullRequestReviewCommentEvent"
          ]
        },
        "org": {
          "type": "object"
        },
        "payload": {
          "type": "object"
        },
        "actor": {
          "type": "object"
        },
        "repo": {
          "type": "object"
        },
        "public": {
          "type": "boolean",
          "example": "true"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-24T15:42:53Z"
        }
      }
    },
    "RepositoryEntity": {
      "required": [
        "id",
        "owner",
        "name",
        "url",
        "sha",
        "html_url",
        "comments_url",
        "fork"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "33387350"
        },
        "owner": {
          "type": "object",
          "$ref": "#/definitions/UserEntity"
        },
        "name": {
          "type": "string",
          "example": "ovr/ghubber"
        },
        "url": {
          "type": "string",
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "sha": {
          "type": "string",
          "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "html_url": {
          "type": "string",
          "example": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
        },
        "comments_url": {
          "type": "string",
          "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
        },
        "fork": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UserEntity": {
      "required": [
        "login",
        "id",
        "avatar_url",
        "gravatar_id",
        "site_admin",
        "name",
        "company",
        "blog",
        "location",
        "email",
        "hireable",
        "bio",
        "public_repos",
        "public_gists",
        "followers",
        "following"
      ],
      "properties": {
        "login": {
          "type": "string",
          "example": "ovr"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 572096
        },
        "avatar_url": {
          "type": "string",
          "example": "1"
        },
        "gravatar_id": {
          "type": "string",
          "example": ""
        },
        "site_admin": {
          "type": "boolean",
          "example": false
        },
        "name": {
          "type": "string",
          "example": "Dmitry Patsura"
        },
        "company": {
          "type": "string",
          "example": "@lowl-io @interpals"
        },
        "blog": {
          "type": "string",
          "example": "https://resume.dmtry.me/"
        },
        "location": {
          "type": "string",
          "example": "Docker, Container"
        },
        "email": {
          "type": "string",
          "example": "talk@dmtry.me"
        },
        "hireable": {
          "type": "boolean",
          "example": true
        },
        "bio": {
          "type": "string",
          "example": "Hey! I am full stack web developer Who loves computer science and hipster technologies. The best way to know me will be researching on Github's profile."
        },
        "public_repos": {
          "type": "integer",
          "format": "int32",
          "example": 168
        },
        "public_gists": {
          "type": "integer",
          "format": "int32",
          "example": 37
        },
        "followers": {
          "type": "integer",
          "format": "int32",
          "example": 150
        },
        "following": {
          "type": "integer",
          "format": "int32",
          "example": 9
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "description": "JWT token created from POST /token",
      "name": "X-AUTH-TOKEN",
      "in": "header"
    },
    "basic": {
      "type": "basic",
      "description": "Basic authentication"
    }
  }
}